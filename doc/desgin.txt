Design
------
Xauxi is a proxy only and not a classic content provider like apache. The goal of xauxi is simplicity.
The configuration of xauxi is done in pure Lua and therefore even complicated integration job is possible.

Event Handling
--------------
- Poll descriptors
- Handle incoming data
- Handle outgoing data
- Handle timeout

Event Loop
----------

-- connection needs a job based interface
-- the connection:getData(self, size)
--   + first call sets up the job and stores the size and install a curSize = 0
--   + returns data and a boolean
--     + nil,true data block marks the end of the job
--       + next call setup the next job
--     + nil,false tells us that more data are required to finish the job
--       + wait for more data terminate event handler
--   + consecute calls returns chunks of data until size is reached
--   + after job abort next job will be set up
--   + as long as there is a running job, getLine MUST NOT work (should bail actually)
-- the connection:getLine(self) 
--   + returns a full line terminated with \r\n
--     + nil tells us that more data are required to finish the job
--       + wait for more data terminate event handler
  

data_handler(connection, data)
  connection:push(data)
  -- handle_request returns true as long as it could get enough data nil if not
  while not connection:empty() and handle_request do end
end

accept_handler
  dispachter(datat_handler, connection)
end

main
  dispatcher(accept_handler, listener)
end
