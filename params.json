{"name":"xauxi","tagline":"event driven Lua based reverse proxy","body":"### Welcome to xauxi.\r\nxauxi is a event driven reverse proxy based on Lua. The configuration is in fact a Lua script. You have full access to the connection/request/response including the possible body data. As http is just a Lua filter which is feed by the connections incomming data it is possible to handle any kind of protocol.\r\n\r\nXau xi is vietnamese and stands for ugly. The word itself sounds cute. That's xauxi, guly but cute. The idea is to solve 0815 use cases with a simple configuration but also be able to handle realy nasty situations. For example handle test clients or monitors different to normal user. It would be even possible to inject a configuration by authentication service, for example user specific settings bound to the users role.\r\n\r\n### Version\r\nAlpha vesion. Just checkout the git repo and explore the test cases and code. Or download the tar ball of the git repos.\r\n\r\n### Features\r\nCurrently only plain TCP is supported. I will first get a feeling for the configuration and the code before introducing SSL.\r\n\r\n### How to start\r\n```\r\nxauxi --root <root-path> --lib <lib-paths>\r\n```\r\n*root-path* points to xauxi root directory. In the root directory there must be a \"conf\" directory, where xaux.lua can be found.\r\n\r\n*lib-paths* is a Lua path definition, where the xauxi Lua modules can be found. the Lua modules are in the lib directory of the tar ball.\r\n\r\nLet's head and start xauxi in the tar ball, of course you need to ./configure && make first.\r\n```\r\n./src/xauxi --root test/simple --lib lib\r\n```\r\n\r\nCurrently only read a http request is possible, but no response, I'm working on it...\r\n\r\n### Sample configuration\r\nA sample configuration could look as follow\r\n```\r\nhttp = require \"http\"\r\n\r\n-- Frist simple proxy configuration \r\nfunction global()\r\n  listen(\"localhost:8080\",\r\n    function(connection, data)\r\n      http.filter(connection, data, function(r, buf)\r\n        if http.location(r.uri, \"/foo\") then\r\n          say(200, \"hit 1 /foo location\")\r\n        elseif http.location(r.uri, \"/bar\") then\r\n          say(200, \"hit 1 /bar location\")\r\n        else\r\n          say(404, \"404 Not Found\")\r\n        end\r\n      end)\r\n    end)\r\n  go()\r\nend\r\n```\r\n\r\n### Authors and Contributors\r\nProject started 2013 by Christian Liesch (@ia97lies)\r\n\r\n### Licence\r\n[Apache Licence Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}