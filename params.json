{"name":"xauxi","tagline":"reverse proxy","body":"### Welcome to xauxi.\r\nxauxi is a event driven reverse proxy. The configuration is a Lua script. In the configuration you have full access to the connection/request/response including the possible body data. It is easy to write own plugins to manipulate request, response and data. As http is just a plugin written in Lua it is possible to handle any kind of protocol by writing particular plugins. As it is event driven the plugins must keep track of their state while receiving the data. Plugins after the http plugin will only get the body data and a request record. It is possible to write plugins either in C/C++ or Lua.\r\n\r\nXau xi is vietnamese and stands for ugly. The idea is to solve standard use cases with a simple configuration but also be able to handle realy nasty situations. For example handle test clients or monitors different to normal user. It would be even possible to inject a configuration by authentication service, for example user specific settings bound to the users role.\r\n\r\n### Version\r\nAlpha vesion. Just checkout the git repo and explore the test cases and code. Or download the tar ball of the git repos.\r\n\r\n### Features\r\n* Simple response method\r\n* Request routing based on URI, http version, method and headers\r\n* Keepalive request (but not able to handle Connection header)\r\n* Concurrency\r\n\r\n### How to build\r\n```\r\n./configure && make all\r\n```\r\nBinary can be found in the src directory.\r\n\r\n\r\n### How to run tests \r\nYou need httest installed. You can either get the tar ball from sourceforge and build it or if you are running ubuntu ```sudo apt-get install httest ```\r\n\r\n#### Run all tests\r\n```\r\nmake check\r\n```\r\n\r\n#### Run lua unit tests\r\nSingle lua tests\r\n```\r\ncd test; ./lua_unit <lua-file>\r\n```\r\n\r\n#### Run integration tests\r\nAll httest\r\n```\r\ncd test; ./run_httest.sh\r\n```\r\n\r\nSingle httest\r\n```\r\n./src/xauxi --root test/simple --lib lib > xauxi.log &\r\ncd test; ./run.sh <htt-file>\r\n```\r\n\r\n### How to start\r\n```\r\nxauxi --root <root-path> --lib <lib-paths>\r\n```\r\n*root-path* points to xauxi root directory. In the root directory there must be a \"conf\" directory, where xaux.lua can be found.\r\n\r\n*lib-paths* is a Lua path definition, where the xauxi Lua modules can be found. the Lua modules are in the lib directory of the tar ball.\r\n\r\nLet's head and start xauxi in the tar ball, of course you need to ./configure && make first.\r\n```\r\n./src/xauxi --root test/simple --lib lib\r\n```\r\n\r\n### Sample configuration\r\nA sample configuration could look as follow\r\n```\r\nhttp = require \"http\"\r\n\r\n-- Frist simple proxy configuration \r\nfunction global()\r\n  listen(\"localhost:8080\",\r\n    function(connection, data)\r\n      http.stream(connection, data, function(r, data)\r\n        if http.location(r.uri, \"/foo\") then\r\n          r:say(200, \"hit 1 /foo location\")\r\n        elseif http.location(r.uri, \"/bar\") then\r\n          r:say(200, \"hit 1 /bar location\")\r\n        else\r\n          r:say(404, \"404 Not Found\")\r\n        end\r\n      end)\r\n    end)\r\n  go()\r\nend\r\n```\r\n\r\n### Authors and Contributors\r\nProject started 2013 by Christian Liesch (@ia97lies)\r\n\r\n### Licence\r\n[Apache Licence Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}